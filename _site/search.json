[
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks/Invited Lectures",
    "section": "",
    "text": "Invited Lectures\n\nData Analysis using R (Hands-on Experience)\nPresidency University, Bangalore (Online, 2024)\nDelivered a session on using R for data analysis as part of the Faculty Development Program on Advanced Research Methodology & Data Analysis.\nðŸ”— Slides available here\nUsing R for Data Analysis\nCentral University of South Bihar (Gaya, Bihar, 2022)\nInvited lecture to introduce R for social science researchers.\n\n\n\nTalks\n\nWhat Grad School Donâ€™t Teach You: Tools for Transparent and Reproducible Research\nPreconference Workshop, KEA Economic Conference 2025\nDelivered a session on the importance of reproducibility in research, covering tools like Git, Quarto, R, and Python.\nðŸ”— Materials available here\nPurrr, A Multipurpose Package\nBoston R Users Group (Remote, 2021)\nDelivered a lightning talk on the use of one of my favorite packages, â€˜Purrr.â€™\nA Sneak Peek into R for Economics\nEconomiga (Remote, 2021)\nDelivered a live talk on using R in Economics Research.\nðŸ”— Watch the talk here\nðŸ”— Event details"
  },
  {
    "objectID": "new.html",
    "href": "new.html",
    "title": "Generate images with OpenAI",
    "section": "",
    "text": "In this tutorial, we will explore how to generate images using OpenAIâ€™s image generation API in R. The openai package provides a simple way to interact with OpenAIâ€™s models, making it easy for R users to create AI-generated visuals. Whether youâ€™re a data scientist, researcher, or hobbyist, this guide will help you get started with generating images programmatically."
  },
  {
    "objectID": "new.html#install-and-load-the-openai-package",
    "href": "new.html#install-and-load-the-openai-package",
    "title": "Generate images with OpenAI",
    "section": "Install and Load the openai Package",
    "text": "Install and Load the openai Package\nBefore we begin, make sure you have the openai package installed. If you havenâ€™t installed it yet, you can do so using:\ninstall.packages(\"openai\")\nLoad the package into your R session:\nlibrary(openai)"
  },
  {
    "objectID": "new.html#setting-up-your-api-key",
    "href": "new.html#setting-up-your-api-key",
    "title": "Generate images with OpenAI",
    "section": "Setting Up Your API Key",
    "text": "Setting Up Your API Key\nTo use OpenAIâ€™s API, you need an API key. If you havenâ€™t already, sign up on OpenAIâ€™s websiteand obtain your API key. Then, store it securely in your R session:\nSys.setenv(OPENAI_API_KEY = \"your-api-key-here\")\nAlternatively, you can store the key in an .Renviron file for persistent access."
  },
  {
    "objectID": "new.html#basic-image-generation",
    "href": "new.html#basic-image-generation",
    "title": "Generate images with OpenAI",
    "section": "Basic Image Generation",
    "text": "Basic Image Generation\nHereâ€™s a simple example where we generate an image of a futuristic city:\nresponse &lt;- create_image(\n  prompt = \"A futuristic city skyline at sunset with flying cars\",\n  n = 1,  # Number of images to generate\n  size = \"1024x1024\"  # Image size\n)\n\n# Print the response to get the image URL\nresponse$data$url"
  },
  {
    "objectID": "new.html#customizing-the-output",
    "href": "new.html#customizing-the-output",
    "title": "Generate images with OpenAI",
    "section": "Customizing the Output",
    "text": "Customizing the Output\nYou can modify the n parameter to generate multiple images at once:\nresponse &lt;- create_image(\n  prompt = \"A cyberpunk-themed street with neon lights\",\n  n = 3,  # Generate three images\n  size = \"1024x1024\"\n)\n\n# View all generated image URLs\nresponse$data$url"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Nithin M\nSocial Services Division\nKerala State Planning Board\nPattom, Thiruvananthapuram\nKerala - 695004\nPhone: +91 9447748013\nE-mail: write2nithinm@gmail.com"
  },
  {
    "objectID": "blog/Data/index.html",
    "href": "blog/Data/index.html",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "",
    "text": "here() starts at C:/Users/hp/Documents/GitHub/website/site\n\n\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.5\nâœ” forcats   1.0.0     âœ” stringr   1.5.1\nâœ” ggplot2   3.5.1     âœ” tibble    3.2.1\nâœ” lubridate 1.9.4     âœ” tidyr     1.3.1\nâœ” purrr     1.0.4     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– purrr::%||%()   masks base::%||%()\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "blog/Data/index.html#setting-up-your-rstudio-project",
    "href": "blog/Data/index.html#setting-up-your-rstudio-project",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Setting Up Your RStudio Project",
    "text": "Setting Up Your RStudio Project\nBefore we dive into data management techniques, itâ€™s essential to organize your work efficiently. I recommend starting by creating a new project in RStudio. This will help you manage your files and set a working directory automatically.\n\nOpen RStudio.\nGo to File -&gt; New Project....\nChoose New Directory -&gt; New Project.\nName your project and select a directory.\nClick Create Project.\n\nWith your project set up, you can easily manage your files and scripts, ensuring that your working directory is always pointing to the correct folder."
  },
  {
    "objectID": "blog/Data/index.html#sample-data",
    "href": "blog/Data/index.html#sample-data",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Sample Data",
    "text": "Sample Data\nLet us create a small sample data\n\n# Sample data frame\ndata &lt;- data.frame(\n  id = 1:5,\n  age = c(21, 25, 30, 22, 28),\n  gender = factor(c(\"Male\", \"Female\", \"Male\", \"Female\", \"Female\")),\n  income = c(50000, 60000, 70000, 80000, 90000),\n  education = c(1, 2, 3, 2, 1) # Numeric variable for education\n)\n\n\nlibrary(here) # for relative path\n# Save the dataset using the here package\nwrite_csv(data, file = here(\"data\", \"dummy_data.csv\"))\n\nThis will store our dummy data in the project folder."
  },
  {
    "objectID": "blog/Data/index.html#renaming-variables-using-dplyr",
    "href": "blog/Data/index.html#renaming-variables-using-dplyr",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Renaming Variables Using dplyr",
    "text": "Renaming Variables Using dplyr\nUsing the dplyr package, you can rename variables in two ways: with the rename() function or by using the select() function. Below is an example of both approaches, presented in a tabset for clarity.\n\nUsing rename()Using select()\n\n\n\n# Load dplyr\nlibrary(dplyr)\n\n# Sample data frame\ndata &lt;- data.frame(\n  id = 1:5,\n  age = c(21, 25, 30, 22, 28),\n  gender = factor(c(\"Male\", \"Female\", \"Male\", \"Female\", \"Female\")),\n  income = c(50000, 60000, 70000, 80000, 90000),\n  education = c(1, 2, 3, 2, 1) # Numeric variable for education\n)\n\n# Renaming variables using rename()\ndata &lt;- data %&gt;%\n  rename(\n    respondent_id = id,\n    education_level = education\n  )\n\n# Display updated names\nprint(names(data))\n\n[1] \"respondent_id\"   \"age\"             \"gender\"          \"income\"         \n[5] \"education_level\"\n\n\n\n\n\n# Load dplyr\nlibrary(dplyr)\n\n# Sample data frame\ndata &lt;- data.frame(\n  id = 1:5,\n  age = c(21, 25, 30, 22, 28),\n  gender = factor(c(\"Male\", \"Female\", \"Male\", \"Female\", \"Female\")),\n  income = c(50000, 60000, 70000, 80000, 90000),\n  education = c(1, 2, 3, 2, 1) # Numeric variable for education\n)\n\n# Renaming variables using select()\ndata &lt;- data %&gt;%\n  select(\n    respondent_id = id,\n    age,\n    gender,\n    income,\n    education_level = education\n  )\n\n# Display updated names\nprint(names(data))\n\n[1] \"respondent_id\"   \"age\"             \"gender\"          \"income\"         \n[5] \"education_level\""
  },
  {
    "objectID": "blog/AI/index.html",
    "href": "blog/AI/index.html",
    "title": "Generate images with OpenAI",
    "section": "",
    "text": "In this tutorial, we will explore how to generate images using OpenAIâ€™s image generation API in R. The openai package provides a simple way to interact with OpenAIâ€™s models, making it easy for R users to create AI-generated visuals. Whether youâ€™re a data scientist, researcher, or hobbyist, this guide will help you get started with generating images programmatically."
  },
  {
    "objectID": "blog/AI/index.html#install-and-load-the-openai-package",
    "href": "blog/AI/index.html#install-and-load-the-openai-package",
    "title": "Generate images with OpenAI",
    "section": "Install and Load the openai Package",
    "text": "Install and Load the openai Package\nBefore we begin, make sure you have the openai package installed. If you havenâ€™t installed it yet, you can do so using:\n\ninstall.packages(\"openai\", repos = \"https://cloud.r-project.org/\")\n\nLoad the package into your R session:\n\nlibrary(openai)"
  },
  {
    "objectID": "blog/AI/index.html#setting-up-your-api-key",
    "href": "blog/AI/index.html#setting-up-your-api-key",
    "title": "Generate images with OpenAI",
    "section": "Setting Up Your API Key",
    "text": "Setting Up Your API Key\nTo use OpenAIâ€™s API, you need an API key. If you havenâ€™t already, sign up on OpenAIâ€™s websitea and obtain your API key. Then, store it securely in your R session:\n\nSys.setenv(OPENAI_API_KEY = \"Your API Key\")\n\nAlternatively, you can store the key in an .Renviron file for persistent access."
  },
  {
    "objectID": "blog/AI/index.html#basic-image-generation",
    "href": "blog/AI/index.html#basic-image-generation",
    "title": "Generate images with OpenAI",
    "section": "Basic Image Generation",
    "text": "Basic Image Generation\nHereâ€™s a simple example where we generate an image of a futuristic city:\n\nresponse &lt;- create_image(\n  prompt = \"a roman cat\",\n  n = 1,  # Number of images to generate\n  size = \"1024x1024\"  # Image size\n)\n\n# Print the response to get the image URL\nresponse$data$url"
  },
  {
    "objectID": "blog/AI/index.html#customizing-the-output",
    "href": "blog/AI/index.html#customizing-the-output",
    "title": "Generate images with OpenAI",
    "section": "Customizing the Output",
    "text": "Customizing the Output\nYou can modify the n parameter to generate multiple images at once:\n\nresponse &lt;- create_image(\n  prompt = \"A cyberpunk-themed street with neon lights\",\n  n = 3,  # Generate three images\n  size = \"1024x1024\"\n)\n\n# View all generated image URLs\nresponse$data$url"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Welcome to my Blog!!\nHere, Iâ€™ll share ideas, tips, and tricks on R programming, Statistics, Econometrics, Data Science, and a bit about running. Whether youâ€™re interested in data or looking for running motivation, I hope you find something useful!\nPlease feel free to reach out to me!!\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nGenerate images with OpenAI\n\n\n\n\n\n\nR\n\n\nOpenAI\n\n\nTutorial\n\n\n\n\n\n\n\n\n\nApr 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nStreamlining R Workflows: A Practitionerâ€™s Guide to Data Management\n\n\n\n\n\n\nR\n\n\nData Management\n\n\nTutorial\n\n\n\n\n\n\n\n\n\nApr 5, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nithin M",
    "section": "",
    "text": "Hello, Iâ€™m Nithin. Welcome to my website! Iâ€™m an economist specializing in macroeconomics, with a passion for data analysis and programming.\nCurrently, I am a Research Assistant at State Planning Board, Government of Kerala\nBeyond research and coding, Iâ€™m also an endurance athlete, always pushing boundariesâ€”whether in economic modeling or on the track."
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Work in Progress\nDoes Sentiment Predict Consumption Growth of Indian Households? [Slides] [Paper]\nThis is a joint work with Dr.Â Siddhartha Chattopadhyay of IIT Kharagpur and Dr.Â Sohini Sahu of IIT Kanpur. Earlier version of this paper was presented at the 19th Annual Conference at ISI Delhi and Workshop on Open Economy Macroeconomics and Economic Integration in Emerging Market Economies at Centre for Development Studies, Thiruvananthapuram.\n\n\nPublications\n\nMani, N., Mishra, A. K., & Pandikasala, J. (2023). How serious is Indiaâ€™s nonperforming assets crisis? A structural satellite version of the financial-macroeconometric model. Asia-Pacific Financial Markets, 30(4), 761â€“794. https://doi.org/10.1007/s10690-023-09397-9\n\nJijin, P., Mishra, A. K., & Nithin, M. (2022). Macroeconomic determinants of remittances to India. Economic Change and Restructuring, 55(2), 1229â€“1248.\n\nPandikasala, J., Vyas, I., & Mani, N. (2022). Do financial development drive remittances?\n\nNithin, M., Jijin, P., & Baiju, P. (2018). Has demonetisation pushed digitalisation in India? Some counter evidences. Journal of Business Thought, 9, 58â€“69. https://doi.org/10.18311/jbt/2018/21170\n\n\n\nResearch Interests\nConsumption Dynamics, Consumption Heterogeneity, Fiscal and Monetary Issues"
  },
  {
    "objectID": "blog/Data/index.html#dropping-some-variables",
    "href": "blog/Data/index.html#dropping-some-variables",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Dropping some variables",
    "text": "Dropping some variables\nDropping variables is a key operation in data cleaning. Let us see how we do it\n\nBase-RTidyverse\n\n\n\n# Drop 'education' column by excluding it\ndata &lt;- data[, names(data) != \"education\"]\n\n\n# Alternatively, keep only specific columns\ndata &lt;- data[, c(\"id\", \"age\", \"gender\", \"income\")]\n\n\n\n\nlibrary(dplyr)\n\n# Drop 'education' column using dplyr\ndata &lt;- data %&gt;% select(-education)\n\n# Keep only specific columns\ndata &lt;- data %&gt;% select(id, age, gender, income)"
  },
  {
    "objectID": "blog/Data/index.html#renaming",
    "href": "blog/Data/index.html#renaming",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Renaming",
    "text": "Renaming\nRenaming variables is essential for clarity and consistency, especially when dealing with raw data that may use cryptic or inconsistent naming conventions, long variable names etc.\nMany users tend to rely on base R functions to rename variables within their data frames. The most common method involves using the names() function or colnames() function to directly set new variable names. Hereâ€™s how typical users might approach this task:\n\ncolnames(data) &lt;- c(\"respondent_id\", \"age\", \"gender\", \"income\", \"education_level\")\nhead(data)\n\na more familiar user of R might prefer using tidyverse approach which can be of two methods\nUsing the dplyr package, you can rename variables in two ways: with the rename() function or by using the select() function. Below is an example of both approaches\n\nUsing rename()Using select()\n\n\n\n# Load dplyr\nlibrary(dplyr)\n\n# Sample data frame\ndata &lt;- data.frame(\n  id = 1:5,\n  age = c(21, 25, 30, 22, 28),\n  gender = factor(c(\"Male\", \"Female\", \"Male\", \"Female\", \"Female\")),\n  income = c(50000, 60000, 70000, 80000, 90000),\n  education = c(1, 2, 3, 2, 1) # Numeric variable for education\n)\n\n# Renaming variables using rename()\ndata &lt;- data %&gt;%\n  rename(\n    respondent_id = id,\n    education_level = education\n  )\n\n# Display updated names\nhead(data)\n\n\n\n\n# Load dplyr\nlibrary(dplyr)\n\n# Sample data frame\ndata &lt;- data.frame(\n  id = 1:5,\n  age = c(21, 25, 30, 22, 28),\n  gender = factor(c(\"Male\", \"Female\", \"Male\", \"Female\", \"Female\")),\n  income = c(50000, 60000, 70000, 80000, 90000),\n  education = c(1, 2, 3, 2, 1) # Numeric variable for education\n)\n\n# Renaming variables using select()\ndata &lt;- data %&gt;%\n  select(\n    respondent_id = id,\n    age,\n    gender,\n    income,\n    education_level = education\n  )\n\n# Display updated names\nhead(data)"
  },
  {
    "objectID": "blog/Data/index.html#labelling",
    "href": "blog/Data/index.html#labelling",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Labelling",
    "text": "Labelling\nVariable labels provide descriptive metadata that help users (including future you!) understand the meaning of each variable. This is especially useful in large projects or when preparing data for sharing. R users often overlook the importance of creating labels for their variables. When they do decide to create labels, they typically use the labelled package or similar approaches. Hereâ€™s how they might go about it:\n\nBase R (with Hmisc)Tidyverse (with labelled)\n\n\n\n# install.packages(\"Hmisc\") # if not already installed\nlibrary(Hmisc)\n\nlabel(data$age) &lt;- \"Age in years\"\nlabel(data$gender) &lt;- \"Gender of respondent\"\nlabel(data$income) &lt;- \"Annual income in USD\"\nlabel(data$education) &lt;- \"Education level\"\n\n\n\n\n# install.packages(\"labelled\") # if not already installed\nlibrary(labelled)\n\ndata &lt;- data %&gt;%\n  set_variable_labels(\n    age = \"Age in years\",\n    gender = \"Gender of respondent\",\n    income = \"Annual income in USD\",\n    education = \"Education level (1=Primary, 2=Secondary, 3=Tertiary)\"\n  )"
  },
  {
    "objectID": "blog/Data/index.html#setting-up-the-environment",
    "href": "blog/Data/index.html#setting-up-the-environment",
    "title": "Streamlining R Workflows: A Practitionerâ€™s Guide to Data Management",
    "section": "Setting Up the Environment",
    "text": "Setting Up the Environment\nThe first step in creating a reproducible working environment in R is setting up your packages and dependencies in a clean, consistent manner.\n\nWhy pacman?\nOver the years, Iâ€™ve tried various strategies to streamline package management â€” including writing custom functions to install and load required libraries. These functions usually looped through a list of package names, checked if they were installed, installed those that were missing, and then loaded them. While this worked, it was often verbose and harder to maintain over time.\nNow, I prefer using pacman, which offers the same functionality with a cleaner, more robust interface.\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse, haven, janitor, labelled, skimr,\n  readxl, writexl, here, stringr\n)\n\nThis one-liner installs any missing packages and loads them, eliminating the need to manually manage install.packages() and library() calls â€” and avoids the common practice of commenting out installation lines, which can silently break code for others or even your future self.\nMy Earlier Approach Before adopting pacman, I wrote a custom function to do just this â€” install and load a list of packages in a single go. You can view that function here:\nCustom Package Loader Function (GitHub Gist)\n\n\nBeyond pacman: Full Environment Reproducibility\nFor long-term and collaborative projects, itâ€™s beneficial to complement pacman with tools that enhance reproducibility and robustness â€” such as renv, targets, and Docker.\nThese tools help manage dependencies, structure workflows, and containerize your environment for seamless collaboration and future-proofing. Iâ€™ll discuss each of them in more detail later."
  }
]