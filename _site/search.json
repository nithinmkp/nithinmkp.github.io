[
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks/Invited Lectures",
    "section": "",
    "text": "Invited Lectures\n\nData Analysis using R (Hands-on Experience)\nPresidency University, Bangalore (Online, 2024)\nDelivered a session on using R for data analysis as part of the Faculty Development Program on Advanced Research Methodology & Data Analysis.\n🔗 Slides available here\nUsing R for Data Analysis\nCentral University of South Bihar (Gaya, Bihar, 2022)\nInvited lecture to introduce R for social science researchers.\n\n\n\nTalks\n\nWhat Grad School Don’t Teach You: Tools for Transparent and Reproducible Research\nWorkshop Session, YSI-Economiga Monsoon School 2025\nDelivered a session on the importance of reproducibility in research, covering tools like Git, Quarto, R, and Python.\n🔗 Materials available here (a previous version of this talk was presented at pre-conference session, KEA Conference 2025)\nPurrr, A Multipurpose Package\nBoston R Users Group (Remote, 2021)\nDelivered a lightning talk on the use of one of my favorite packages, ‘Purrr.’\nA Sneak Peek into R for Economics\nEconomiga (Remote, 2021)\nDelivered a live talk on using R in Economics Research.\n🔗 Watch the talk here\n🔗 Event details"
  },
  {
    "objectID": "new.html",
    "href": "new.html",
    "title": "Generate images with OpenAI",
    "section": "",
    "text": "In this tutorial, we will explore how to generate images using OpenAI’s image generation API in R. The openai package provides a simple way to interact with OpenAI’s models, making it easy for R users to create AI-generated visuals. Whether you’re a data scientist, researcher, or hobbyist, this guide will help you get started with generating images programmatically."
  },
  {
    "objectID": "new.html#install-and-load-the-openai-package",
    "href": "new.html#install-and-load-the-openai-package",
    "title": "Generate images with OpenAI",
    "section": "Install and Load the openai Package",
    "text": "Install and Load the openai Package\nBefore we begin, make sure you have the openai package installed. If you haven’t installed it yet, you can do so using:\ninstall.packages(\"openai\")\nLoad the package into your R session:\nlibrary(openai)"
  },
  {
    "objectID": "new.html#setting-up-your-api-key",
    "href": "new.html#setting-up-your-api-key",
    "title": "Generate images with OpenAI",
    "section": "Setting Up Your API Key",
    "text": "Setting Up Your API Key\nTo use OpenAI’s API, you need an API key. If you haven’t already, sign up on OpenAI’s websiteand obtain your API key. Then, store it securely in your R session:\nSys.setenv(OPENAI_API_KEY = \"your-api-key-here\")\nAlternatively, you can store the key in an .Renviron file for persistent access."
  },
  {
    "objectID": "new.html#basic-image-generation",
    "href": "new.html#basic-image-generation",
    "title": "Generate images with OpenAI",
    "section": "Basic Image Generation",
    "text": "Basic Image Generation\nHere’s a simple example where we generate an image of a futuristic city:\nresponse &lt;- create_image(\n  prompt = \"A futuristic city skyline at sunset with flying cars\",\n  n = 1,  # Number of images to generate\n  size = \"1024x1024\"  # Image size\n)\n\n# Print the response to get the image URL\nresponse$data$url"
  },
  {
    "objectID": "new.html#customizing-the-output",
    "href": "new.html#customizing-the-output",
    "title": "Generate images with OpenAI",
    "section": "Customizing the Output",
    "text": "Customizing the Output\nYou can modify the n parameter to generate multiple images at once:\nresponse &lt;- create_image(\n  prompt = \"A cyberpunk-themed street with neon lights\",\n  n = 3,  # Generate three images\n  size = \"1024x1024\"\n)\n\n# View all generated image URLs\nresponse$data$url"
  },
  {
    "objectID": "employment.html",
    "href": "employment.html",
    "title": "Employment",
    "section": "",
    "text": "Assistant Professor in Economics\nKerala Agricultural University, Thrissur\nJune 2025 – Present\n\nTeaching undergraduate and postgraduate economics courses.\nResearch in macroeconomics, consumer sentiment, and econometric modeling."
  },
  {
    "objectID": "employment.html#current-position",
    "href": "employment.html#current-position",
    "title": "Employment",
    "section": "",
    "text": "Assistant Professor in Economics\nKerala Agricultural University, Thrissur\nJune 2025 – Present\n\nTeaching undergraduate and postgraduate economics courses.\nResearch in macroeconomics, consumer sentiment, and econometric modeling."
  },
  {
    "objectID": "employment.html#past-experience",
    "href": "employment.html#past-experience",
    "title": "Employment",
    "section": "Past Experience",
    "text": "Past Experience\n\nResearch Assistant\nKerala State Planning Board, Government of Kerala\nJan 2024 – June 2025\n\nAssociated with the Social Services Divison of the Board.\nPrepared Annual Plans, Budget Statements, and Economic Review.\nConducted research on social sectors such as education and sports.\nWorked with large-scale socio-economic data (DHS, NSSO) using R/Python.\n\nKerala State Planning Board, Government of Kerala\nNov 2021 – Feb 2022\n\nPrepared Annual Plans, Budget Statements, and Economic Review.\nAssociated with the Industrial and Infrastructure division of the board\nAvailed Study leave till Jan 2024\n\n\n\n\nVisiting Faculty\nSarla Anil Modi School of Economics, NMIMS, Mumbai\nOct 2020 – Jan 2021\n\nTaught Advanced Microeconomics to Master’s students.\n\n\n\n\nGuest Faculty\nGovernment College Kodancherry, University of Calicut\nOct 2018 – Jan 2019\n\nTaught Advanced Microeconomics to both Master’s and Bachelor’s students."
  },
  {
    "objectID": "blog/LLM/index.html",
    "href": "blog/LLM/index.html",
    "title": "LLMs in R and Python",
    "section": "",
    "text": "R/Python users\nsome experience with coding\nused chatGPT/Claude in browser\nhave not used LLMs in code"
  },
  {
    "objectID": "blog/LLM/index.html#setting-up",
    "href": "blog/LLM/index.html#setting-up",
    "title": "LLMs in R and Python",
    "section": "Setting Up",
    "text": "Setting Up\nWe will use ellmer and dotenv packages in R to set things up. We use dotenv package to load our API keys.\n\ninstall.packages(c(\"ellmer\",\"dotenv\"))\n\nFirst we need to obtain API keys. Since OpenAI and Claude are not free, we will use “Gemini” and “Grok” in our examples\n\nobtain API keys and save in a .env file in the working directory as a key-value pair.\n\nGEMINI_API_KEY=your_key_here\nGROK_API_KEY=your_key_here\n\n# options(ellmer.model = ellmer::chat_groq())\nlibrary(ellmer)\nlibrary(dotenv)\noptions(ellmer.model = ellmer::chat_google_gemini())\n\nNow let us set the model and invoke the chat\n\n# chat_google_gemini(system_prompt = \"You are an experienced R Programmer. Give me only tidyverse codes. Also use proper linting and styling when giving codes\")\nclient &lt;- chat_google_gemini()\n\nUsing model = \"gemini-2.0-flash\".\n\n\nNow that we have invoked the chat, let us prompt something\n\nclient$chat(\"Summarize the plot of Romeo and Juliet in 20 words or less.\")\n\nForbidden love between feuding families leads to tragic deaths of Romeo and \nJuliet, ending the bitter conflict.\n\n\nWe can continue the conversation by calling the chat() again.\n\nclient$chat(\"Now Macbeth\")\n\nDriven by ambition and prophecy, Macbeth murders his king, becomes a tyrant, \nand meets a bloody end.\n\n\nNow we can modify the system prompt and get better results\n\nchat_google_gemini(\n  system_prompt = \"You are well versed in literature. Give some lucid explanation of the literature in about 100 words\"\n)\n\n&lt;Chat Google/Gemini/gemini-2.0-flash turns=1 tokens=0/0 $0.00&gt;\n── system [0] ──────────────────────────────────────────────────────────────────\nYou are well versed in literature. Give some lucid explanation of the literature in about 100 words\n\nclient &lt;- chat_google_gemini()\nclient$chat(\"Summarize the plot of Romeo and Juliet\")\n\nRomeo and Juliet is a tragic love story about two young people from feuding \nfamilies, the Montagues and the Capulets, who fall deeply in love.\n\n*   **The Feud:** The play opens with a violent street brawl between the two \nfamilies, highlighting their long-standing animosity.\n*   **Love at First Sight:** Romeo, a Montague, attends a Capulet ball and \ninstantly falls in love with Juliet, a Capulet. They are unaware of each \nother's family affiliation.\n*   **Secret Marriage:** Despite their families' hatred, Romeo and Juliet \ndeclare their love and secretly marry with the help of Friar Laurence.\n*   **Tragedy Strikes:** A fight breaks out between Romeo's friend Mercutio and\nJuliet's cousin Tybalt. Romeo tries to stop them, but Tybalt kills Mercutio. \nEnraged, Romeo kills Tybalt and is banished from Verona by the Prince.\n*   **Desperate Measures:** Juliet's parents, unaware of her marriage to Romeo,\narrange for her to marry Paris. Desperate to avoid this, Juliet seeks help from\nFriar Laurence. He devises a plan for her to take a potion that will make her \nappear dead, so she can avoid the marriage and reunite with Romeo.\n*   **Miscommunication:** The message about Juliet's staged death doesn't reach\nRomeo in time. Believing Juliet is truly dead, Romeo returns to Verona and goes\nto Juliet's tomb.\n*   **The Double Suicide:** In the tomb, Romeo kills Paris, who is also there \nto mourn Juliet. Overcome with grief, Romeo drinks poison and dies. When Juliet\nawakens and finds Romeo dead, she takes his dagger and kills herself.\n*   **Reconciliation:** The families arrive to find their children dead. Friar \nLaurence explains the events that led to the tragedy. Overwhelmed with remorse,\nthe Montagues and Capulets finally reconcile, ending their feud.\n\nIn short, Romeo and Juliet is a story of passionate love thwarted by familial \nhatred, leading to the tragic deaths of both lovers. Their deaths ultimately \nbring peace to their feuding families.\n\n\nwe can also use the interactive window for conversation.\n\nlive_browser(client)\n\nFurther,we can also save results of our chat.\n\nclient &lt;- chat_groq(\n  system_prompt = \"You are a friendly but terse assistant. You always use markdown syntax for code.\",\n)\n\n\n\n\n\n\n\n\nReply from chat using elmer\n\n\n\nUsing the map Function in R\nThe map function is part of the purrr package in R, which provides a composable functional programming pipeline. It applies a function to each element of an input vector or list, returning a list with the same length as the input.\nHere’s an example:\nlibrary(purrr)\n\n# Create a list of numbers\nnumbers &lt;- list(a = 1, b = 2, c = 3, d = 4)\n\n# Double each number using map\nresult &lt;- map(numbers, ~ .x * 2)\n\n# Print the result\nresult\nOutput:\n$a \n[1] 2\n\n$b \n[1] 4\n\n$c \n[1] 6\n\n$d \n[1] 8\nComparing map with lapply\nlapply is a built-in R function that applies a function to each element of a list and returns a list. Here’s an example:\n# Double each number using lapply\nresult &lt;- lapply(numbers, function(x) x * 2)\n\n# Print the result\nresult\nOutput:\n$a \n[1] 2\n\n$b \n[1] 4\n\n$c \n[1] 6\n\n$d \n[1] 8\nAs you can see, both map and lapply produce the same result in this example. However, map is generally more concise and expressive, especially when dealing with complex data structures or pipelines.\nKey differences:\n\nmap is part of the purrr package, while lapply is a built-in R function.\nmap is more concise and expressive, making it a popular choice for functional programming in R.\nlapply is more flexible, as it can handle vectors and other types of input, whereas map is limited to lists and vectors.\n\nChoose map when:\n\nYou need to perform a simple transformation on each element of a list or vector.\nYou want to leverage the concise syntax and expressiveness of functional programming.\n\nChoose lapply when:\n\nYou need to perform a more complex operation that involves manipulating the index, such as using lapply with a named list.\nYou prefer a more traditional, R-style syntax for applying a function to a list.\n\nI hope this helps!"
  },
  {
    "objectID": "blog/LLM/index.html#export-chat",
    "href": "blog/LLM/index.html#export-chat",
    "title": "LLMs in R and Python",
    "section": "Export chat",
    "text": "Export chat\nEasily get a full markdown or HTML export of a conversation:\n\nchat.export(\"convo.md\", title=\"Python Q&A\")"
  },
  {
    "objectID": "blog/Data/speed.html",
    "href": "blog/Data/speed.html",
    "title": "Testing Python vs R",
    "section": "",
    "text": "As data analysts and researchers, we often toggle between R and Python. But how do they compare in terms of raw speed—especially for common tasks like grouped aggregation?\nIn this post, I benchmark different approaches using both R and Python, including base R, tidyverse, data.table, pandas, and polars. I also experiment with calling Python’s Polars from within R using reticulate, just to see if inter-language calls come with performance penalties—or surprises.\nLet’s dive in."
  },
  {
    "objectID": "blog/Data/speed.html#the-setup",
    "href": "blog/Data/speed.html#the-setup",
    "title": "Testing Python vs R",
    "section": "The Setup",
    "text": "The Setup\nThe dataset I’m using is nba_all_elo.csv. You can get the data here It contains Elo ratings and predictions for thousands of NBA games. This data has 126314 rows and 23 columns.\n\nBase- RR - TidyversePython - PolarsPython - PandasPolars in RPolars inside RR - data.table\n\n\n\nbench::mark(\n  base_r = {\n    nba &lt;- read.csv(\"nba_all_elo.csv\")\n    aggregate(forecast ~ game_result, data = nba, FUN = mean)\n  },\n  iterations = 10,\n  check = FALSE\n)\n\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 base_r        1.79s    2.02s     0.491     121MB     1.32\n\n\n\n\n\nbench::mark(\n  tidyverse = {\n    read_csv(\"nba_all_elo.csv\") |&gt;\n      summarise(avg_points = mean(forecast), .by = game_result)\n  },\n  iterations = 10,\n  check = FALSE\n)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 tidyverse     645ms    651ms      1.51    50.7MB     3.53\n\n\n\n\n\npolars_stmt = \"\"\"\nimport polars as pl\ndf = pl.read_csv('nba_all_elo.csv')\ndf.group_by('game_result').agg(pl.col('forecast').mean().alias('avg_points'))\n\"\"\"\npolars_time = timeit.timeit(stmt=polars_stmt, number=10) / 10\nprint(f\"Polars avg time over 10 runs: {polars_time:.6f} sec\")\n\nPolars avg time over 10 runs: 0.044341 sec\n\n\n\n\n\npandas_stmt = \"\"\"\nimport pandas as pd\ndf = pd.read_csv('nba_all_elo.csv')\ndf.groupby('game_result', as_index=False)[\"forecast\"].mean()\n\"\"\"\npandas_time = timeit.timeit(stmt=pandas_stmt, number=10) / 10\nprint(f\"Pandas avg time over 10 runs: {pandas_time:.6f} sec\")\n\nPandas avg time over 10 runs: 0.439172 sec\n\n\n\n\n\nbench::mark(\n  r_polars = {\n    df &lt;- pl$read_csv(\"nba_all_elo.csv\")\n    df$group_by(\"game_result\")$agg(\n      pl$col(\"forecast\")$mean()$alias(\"avg_points\")\n    )\n  },\n  iterations = 10,\n  check = FALSE\n)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 r_polars     63.7ms   69.3ms      13.9    1.52MB        0\n\n\n\n\n\nbench::mark(\n  py_polars_in_r = {\n    py_run_string(\n      \"\nimport polars as pl\ndf = pl.read_csv('nba_all_elo.csv')\ndf.group_by('game_result').agg(\n  pl.col('forecast').mean().alias('avg_points')\n)\n      \"\n    )\n  },\n  iterations = 10,\n  check = FALSE\n)\n\n# A tibble: 1 × 6\n  expression          min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt;     &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 py_polars_in_r   37.3ms   40.9ms      23.0        0B        0\n\n\n\n\n\nbench::mark(\n  data_table = {\n    dt &lt;- fread(\"nba_all_elo.csv\")\n    dt[, .(avg_points = mean(forecast, na.rm = TRUE)), by = game_result]\n  },\n  iterations = 10,\n  check = FALSE\n)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 data_table    124ms    126ms      7.73    27.1MB     6.45"
  },
  {
    "objectID": "blog/Data/speed.html#key-takeaways",
    "href": "blog/Data/speed.html#key-takeaways",
    "title": "Testing Python vs R",
    "section": "Key Takeaways",
    "text": "Key Takeaways\nHere’s what stood out from the benchmarks:\n✅ Polars in R is the fastest option available. data.table is fast option but often comes at the cost of syntax which I am not comfortable with. It comfortably outsmarts both base R and the tidyverse.\n✅ Polars is blazingly fast often 5–10x faster than Pandas or Tidyverse.\n✅ Surprise! When I invoked Python’s Polars from within R via reticulate, it was as fast as running the same code directly in Python."
  },
  {
    "objectID": "blog/Data/speed.html#final-thoughts",
    "href": "blog/Data/speed.html#final-thoughts",
    "title": "Testing Python vs R",
    "section": "Final Thoughts",
    "text": "Final Thoughts\nSo, if performance is your priority:\n\nUse Polars in R.\nUse polars in Python—or even inside R if you’re already mixing languages.\nAvoid tidyverse for speed-critical tasks, unless readability is your goal.\n\nWith tools like reticulate and quarto, we can blend strengths across ecosystems—without giving up speed. These tools help us to get the best of both worlds.\nThis document was built with R version 4.5.1 and Python version 3.11.\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\nR\n\n\nWarning in system2(\"quarto\", \"-V\", stdout = TRUE, env = paste0(\"TMPDIR=\", :\nrunning command '\"quarto\" TMPDIR=C:/Users/Nithin\nM/AppData/Local/Temp/RtmpgL5g5J/file122014843ff -V' had status 1\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.5.1 (2025-06-13 ucrt)\n os       Windows 11 x64 (build 26100)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_India.utf8\n ctype    English_India.utf8\n tz       Asia/Calcutta\n date     2025-06-19\n pandoc   3.6.2 @ C:/Users/NITHIN~1/AppData/Local/Pandoc/ (via rmarkdown)\n quarto   1.6.40 @ C:\\\\PROGRA~1\\\\Quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n bench       * 1.1.4   2025-01-16 [1] CRAN (R 4.5.0)\n data.table  * 1.17.4  2025-05-26 [1] CRAN (R 4.5.0)\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.5.0)\n pacman      * 0.5.1   2019-03-11 [1] CRAN (R 4.5.0)\n polars      * 0.22.4  2025-05-31 [1] https://r-multiverse.r-universe.dev (R 4.4.3)\n quarto      * 1.4.4   2024-07-20 [1] CRAN (R 4.5.0)\n readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.5.0)\n reticulate  * 1.42.0  2025-03-25 [1] CRAN (R 4.5.0)\n sessioninfo * 1.2.3   2025-02-05 [1] CRAN (R 4.5.0)\n tictoc      * 1.2.1   2024-03-18 [1] CRAN (R 4.5.0)\n tidypolars  * 0.13.0  2025-05-28 [1] https://r-multiverse.r-universe.dev (R 4.4.3)\n\n [1] C:/Users/Nithin M/AppData/Local/R/win-library/4.4\n [2] C:/Program Files/R/R-4.5.1/library\n * ── Packages attached to the search path.\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv/Scripts/python.exe\n libpython:      C:/Users/Nithin M/AppData/Roaming/uv/python/cpython-3.11.11-windows-x86_64-none/python311.dll\n pythonhome:     C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv\n virtualenv:     C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv/Scripts/activate_this.py\n version:        3.11.11 (main, Feb 12 2025, 14:49:02) [MSC v.1942 64 bit (AMD64)]\n Architecture:   64bit\n numpy:          C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv/Lib/site-packages/numpy\n numpy_version:  2.2.6\n \n NOTE: Python version was forced by VIRTUAL_ENV\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\nPython\n\n\npandas: 2.3.0\n\n\npolars: 1.30.0"
  },
  {
    "objectID": "blog/Data/speed.html#r",
    "href": "blog/Data/speed.html#r",
    "title": "Testing Python vs R",
    "section": "R",
    "text": "R\n\n\nWarning in system2(\"quarto\", \"-V\", stdout = TRUE, env = paste0(\"TMPDIR=\", :\nrunning command '\"quarto\" TMPDIR=C:/Users/Nithin\nM/AppData/Local/Temp/RtmpgL5g5J/file122014843ff -V' had status 1\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.5.1 (2025-06-13 ucrt)\n os       Windows 11 x64 (build 26100)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_India.utf8\n ctype    English_India.utf8\n tz       Asia/Calcutta\n date     2025-06-19\n pandoc   3.6.2 @ C:/Users/NITHIN~1/AppData/Local/Pandoc/ (via rmarkdown)\n quarto   1.6.40 @ C:\\\\PROGRA~1\\\\Quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n bench       * 1.1.4   2025-01-16 [1] CRAN (R 4.5.0)\n data.table  * 1.17.4  2025-05-26 [1] CRAN (R 4.5.0)\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.5.0)\n pacman      * 0.5.1   2019-03-11 [1] CRAN (R 4.5.0)\n polars      * 0.22.4  2025-05-31 [1] https://r-multiverse.r-universe.dev (R 4.4.3)\n quarto      * 1.4.4   2024-07-20 [1] CRAN (R 4.5.0)\n readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.5.0)\n reticulate  * 1.42.0  2025-03-25 [1] CRAN (R 4.5.0)\n sessioninfo * 1.2.3   2025-02-05 [1] CRAN (R 4.5.0)\n tictoc      * 1.2.1   2024-03-18 [1] CRAN (R 4.5.0)\n tidypolars  * 0.13.0  2025-05-28 [1] https://r-multiverse.r-universe.dev (R 4.4.3)\n\n [1] C:/Users/Nithin M/AppData/Local/R/win-library/4.4\n [2] C:/Program Files/R/R-4.5.1/library\n * ── Packages attached to the search path.\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv/Scripts/python.exe\n libpython:      C:/Users/Nithin M/AppData/Roaming/uv/python/cpython-3.11.11-windows-x86_64-none/python311.dll\n pythonhome:     C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv\n virtualenv:     C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv/Scripts/activate_this.py\n version:        3.11.11 (main, Feb 12 2025, 14:49:02) [MSC v.1942 64 bit (AMD64)]\n Architecture:   64bit\n numpy:          C:/Users/Nithin M/OneDrive/Documents/GitHub/Websites and CV/websites/personal/nithinmkp.github.io/.venv/Lib/site-packages/numpy\n numpy_version:  2.2.6\n \n NOTE: Python version was forced by VIRTUAL_ENV\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "blog/Data/speed.html#python",
    "href": "blog/Data/speed.html#python",
    "title": "Testing Python vs R",
    "section": "Python",
    "text": "Python\n\n\npandas: 2.3.0\n\n\npolars: 1.30.0"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Welcome to my Blog!!\nHere, I’ll share ideas, tips, and tricks on R programming, Statistics, Econometrics, Data Science, and a bit about running. Whether you’re interested in data or looking for running motivation, I hope you find something useful!\nPlease feel free to reach out to me!!\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nGenerate images with OpenAI\n\n\n\n\n\n\nR\n\n\nOpenAI\n\n\nTutorial\n\n\n\n\n\n\n\n\n\nFeb 28, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nLLMs in R and Python\n\n\n\n\n\n\nR\n\n\nPython\n\n\nAI\n\n\nTutorial\n\n\n\n\n\n\n\n\n\nMay 31, 2025\n\n\nNithin M\n\n\n\n\n\n\n\n\n\n\n\n\nStreamlining R Workflows: A Practitioner’s Guide to Data Management\n\n\n\n\n\n\nR\n\n\nData Management\n\n\nTutorial\n\n\n\n\n\n\n\n\n\nMar 28, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTesting Python vs R\n\n\n\n\n\n\nR\n\n\nPython\n\n\nTutorial\n\n\n\n\n\n\n\n\n\nJun 7, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Nithin M\nRoom No: 104\nDepartment of Development Economics\nCollege of Cooperation Banking and Management\nKerala Agricultural University\nVellanikkara, Thrissur\nKerala - 680656\nPhone: +91 9447748013\nE-mail: write2nithinm@gmail.com"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nithin M",
    "section": "",
    "text": "Hello, I’m Nithin. Welcome to my website! I’m an economist specializing in macroeconomics, with a passion for data analysis and programming.\nCurrently, I am an Assistant Professor in Economics, Kerala Agricultural University\nBeyond research and coding, I’m also an endurance athlete, always pushing boundaries—whether in economic modeling or on the track."
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Work in Progress\nDoes Sentiment Predict Consumption Growth of Indian Households? [Slides] [Latest Version]\nThis is a joint work with Dr. Siddhartha Chattopadhyay of IIT Kharagpur and Dr. Sohini Sahu of IIT Kanpur. Earlier version of this paper was presented at the 19th Annual Conference at ISI Delhi and Workshop on Open Economy Macroeconomics and Economic Integration in Emerging Market Economies at Centre for Development Studies, Thiruvananthapuram.\n\n\nPublications\n\nMani, N., Mishra, A. K., & Pandikasala, J. (2023). How serious is India’s nonperforming assets crisis? A structural satellite version of the financial-macroeconometric model. Asia-Pacific Financial Markets, 30(4), 761–794. https://doi.org/10.1007/s10690-023-09397-9\n\nJijin, P., Mishra, A. K., & Nithin, M. (2022). Macroeconomic determinants of remittances to India. Economic Change and Restructuring, 55(2), 1229–1248.\n\nPandikasala, J., Vyas, I., & Mani, N. (2022). Do financial development drive remittances?\n\nNithin, M., Jijin, P., & Baiju, P. (2018). Has demonetisation pushed digitalisation in India? Some counter evidences. Journal of Business Thought, 9, 58–69. https://doi.org/10.18311/jbt/2018/21170\n\n\n\nResearch Interests\nConsumption Dynamics, Consumption Heterogeneity, Fiscal and Monetary Issues"
  }
]